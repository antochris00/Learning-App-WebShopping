{"version":3,"sources":["./src/app/views/task/task.component.html","./src/app/shared/task/task.service.ts","./src/app/views/task/task-routing.module.ts","./src/app/views/task/task.component.scss","./src/app/views/task/task.component.ts","./src/app/views/task/task.module.ts"],"names":[],"mappings":"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","file":"default~views-dashboard-dashboard-module~views-task-task-module.js","sourcesContent":["export default \"<alert class=\\\"p-4 text-center\\\"></alert>\\r\\n<div class=\\\"card\\\">\\r\\n  <ngx-loading [show]=\\\"loading\\\"></ngx-loading>\\r\\n  <div class=\\\"card-header\\\">\\r\\n    <i class=\\\"fa fa-tasks\\\"></i>TASKS\\r\\n  </div>\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <table class=\\\"table table-responsive-sm table-hover table-outline mb-0\\\">\\r\\n        <ngx-loading [show]=\\\"loading\\\"></ngx-loading>\\r\\n        <thead class=\\\"thead-light\\\">\\r\\n          <tr>\\r\\n            <th>STATUS</th>\\r\\n            <th>TASK CONTENT</th>\\r\\n            <th>DUE DATE</th>\\r\\n            <th>OWNER</th>\\r\\n            <th *ngIf=\\\"showTaskActions()\\\">ACTIONS</th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody style=\\\"background: white;\\\">\\r\\n          <tr *ngFor=\\\"let item of assignedTasks\\\">\\r\\n            <td>\\r\\n              <span *ngIf=\\\"item.status === 'Completed' ? true : false\\\" class=\\\"badge badge-success\\\">{{item.status}}</span>\\r\\n              <span *ngIf=\\\"item.status === 'Overdue' ? true : false\\\" class=\\\"badge badge-danger\\\">{{item.status}}</span>\\r\\n              <span *ngIf=\\\"item.status === 'Pending' ? true : false\\\" class=\\\"badge badge-warning\\\">{{item.status}}</span>\\r\\n            </td>\\r\\n            <td>\\r\\n              {{item.content}}\\r\\n            </td>\\r\\n            <td>\\r\\n              {{item.enddate | date : 'dd-MM-yyyy'}}\\r\\n            </td>\\r\\n            <td>\\r\\n              {{item.creatorName}}\\r\\n            </td>\\r\\n            <td *ngIf=\\\"showTaskActions()\\\">\\r\\n              <span title=\\\"Mark Complete\\\" class=\\\"hover-cursor mousestyle\\\" [class.text-success]=\\\"item.status==='Completed' ? true : false\\\" >\\r\\n                <i class=\\\"fa fa-lg\\\" [ngClass]=\\\"item.status==='Completed'?'fa-check-circle-o':'fa-circle-thin'\\\" (click)=\\\"item.status = 'Completed'; completeTask(item)\\\"></i>\\r\\n              </span>\\r\\n            </td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n      <mat-paginator [length]=\\\"total\\\"\\r\\n        [pageSize]=\\\"pageSize\\\"\\r\\n        [pageSizeOptions]=\\\"pageSizeOptions\\\"\\r\\n        (page)=\\\"action($event)\\\">\\r\\n      </mat-paginator>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"card\\\" *ngIf=\\\"showCreateCard()\\\">\\r\\n  <ngx-loading [show]=\\\"createLoading\\\"></ngx-loading>\\r\\n  <div class=\\\"card-header\\\">\\r\\n    <i class=\\\"fa fa-tasks\\\"></i>CREATE TASK\\r\\n  </div>\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <form>\\r\\n        <textarea id=\\\"textarea-input\\\" name=\\\"textarea-input\\\" rows=\\\"3\\\" class=\\\"form-control\\\" placeholder=\\\"Type What Has to be Done?\\\" [(ngModel)]=\\\"content\\\"></textarea>\\r\\n        <br>\\r\\n        <mat-form-field appearance=\\\"fill\\\" class=\\\"matitem\\\">\\r\\n          <input type=\\\"text\\\"\\r\\n                 placeholder=\\\"Assign To Employee\\\"\\r\\n                 matInput\\r\\n                 [formControl]=\\\"myControl\\\"\\r\\n                 [matAutocomplete]=\\\"auto\\\">\\r\\n          <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\" >\\r\\n            <mat-option (onSelectionChange)=\\\"setUser(option)\\\" *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option.firstName+' '+option.lastName\\\">\\r\\n              {{option.firstName}} {{option.lastName}}\\r\\n            </mat-option>\\r\\n          </mat-autocomplete>\\r\\n        </mat-form-field>\\r\\n        <mat-form-field appearance=\\\"fill\\\" class=\\\"matitem\\\">\\r\\n          <mat-label>DUE Date</mat-label>\\r\\n          <input required matInput [matDatepicker]=\\\"dobpicker\\\" [formControl]=\\\"dateFormControl\\\" (dateChange)=\\\"setEndDate('change', $event)\\\" disabled>\\r\\n          <mat-datepicker-toggle matSuffix [for]=\\\"dobpicker\\\"></mat-datepicker-toggle>\\r\\n          <mat-datepicker #dobpicker disabled=\\\"false\\\"></mat-datepicker>\\r\\n        </mat-form-field>\\r\\n        <button mat-button class=\\\"btn btn-ghost-primary\\\" style=\\\"border: 1px solid;\\\" (click)=\\\"createTask()\\\">\\r\\n          <i class=\\\"fa fa-plus-square-o\\\"></i> Create TASK\\r\\n        </button>\\r\\n      </form>\\r\\n    </div>\\r\\n    <br/>\\r\\n    <div class=\\\"row\\\">\\r\\n      <table class=\\\"table table-responsive-sm table-hover table-outline mb-0\\\">\\r\\n        <ngx-loading [show]=\\\"loading\\\"></ngx-loading>\\r\\n        <thead class=\\\"thead-light\\\">\\r\\n          <tr>\\r\\n            <th>STATUS</th>\\r\\n            <th>TASK CONTENT</th>\\r\\n            <th>DUE DATE</th>\\r\\n            <th>ASSIGNEE ID</th>\\r\\n            <th>ASSIGNEE NAME</th>\\r\\n            <th>ACTIONS</th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody style=\\\"background: white;\\\">\\r\\n          <tr *ngFor=\\\"let item of createdTasks\\\">\\r\\n            <td>\\r\\n              <span *ngIf=\\\"item.status === 'Completed' ? true : false\\\" class=\\\"badge badge-success\\\">{{item.status}}</span>\\r\\n              <span *ngIf=\\\"item.status === 'Overdue' ? true : false\\\" class=\\\"badge badge-danger\\\">{{item.status}}</span>\\r\\n              <span *ngIf=\\\"item.status === 'Pending' ? true : false\\\" class=\\\"badge badge-warning\\\">{{item.status}}</span>\\r\\n            </td>\\r\\n            <td>\\r\\n              {{item.content}}\\r\\n            </td>\\r\\n            <td>\\r\\n              {{item.enddate | date : 'dd-MM-yyyy'}}\\r\\n            </td>\\r\\n            <td>\\r\\n              {{item.assigneeId}}\\r\\n            </td>\\r\\n            <td>\\r\\n              {{item.assigneeName}}\\r\\n            </td>\\r\\n            <td>\\r\\n              <i class=\\\"fa fa-remove\\\" style=\\\"color: red; cursor: pointer;\\\" (click)=\\\"removeTask(item)\\\"></i>\\r\\n            </td>\\r\\n          </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n      <mat-paginator [length]=\\\"total\\\"\\r\\n        [pageSize]=\\\"pageSize\\\"\\r\\n        [pageSizeOptions]=\\\"pageSizeOptions\\\"\\r\\n        (page)=\\\"action($event)\\\">\\r\\n      </mat-paginator>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n\r\n  getCreatedTaskEndpoint = \"/secure/admin/task/getCreatedTasks\";\r\n  getAssignedTaskEndpoint = \"/secure/admin/task/getAssignedTasks\";\r\n  createTaskEndpoint = \"/secure/admin/task/createTask\";\r\n  getAllEmployeeNamesAndEmailEndpoint = \"/secure/admin/employee/getAllEmployeeNames\";\r\n  deleteTaskEndpoint = \"/secure/admin/task/deleteTask\";\r\n  updateTaskEndpoint = \"/secure/admin/task/updateTask\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAssignedTask(): Observable<any> {\r\n    return this.http.get(environment.backendBaseUrl+this.getAssignedTaskEndpoint);\r\n  }\r\n\r\n  getCreatedTask(): Observable<any> {\r\n    return this.http.get(environment.backendBaseUrl+this.getCreatedTaskEndpoint);\r\n  }\r\n\r\n  createTask(content, assigneeId, duedate): Observable<any> {\r\n    const body = {\r\n      assigneeId : assigneeId,\r\n      content : content,\r\n      enddate : duedate\r\n    }\r\n    return this.http.post(environment.backendBaseUrl+this.createTaskEndpoint, body);\r\n  }\r\n\r\n  getAllEmployeeNamesAndEmail(): Observable<any> {\r\n    return this.http.get(environment.backendBaseUrl+this.getAllEmployeeNamesAndEmailEndpoint);\r\n  }\r\n\r\n  removeTask(id){\r\n    const httpOptions = {\r\n      params: {id: id}\r\n    };\r\n    return this.http.delete(environment.backendBaseUrl+this.deleteTaskEndpoint, httpOptions);\r\n  }\r\n\r\n  updateTask(id, status){\r\n    const body = {\r\n      taskId : id,\r\n      status : status\r\n    }\r\n    return this.http.put(environment.backendBaseUrl+this.updateTaskEndpoint, body);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TaskComponent } from './task.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    data: {\r\n      title: 'Tasks'\r\n    },\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'task'\r\n      },\r\n      {\r\n        path: 'task/:isTaskpage',\r\n        component: TaskComponent,\r\n        data: {\r\n          title: 'Manage Tasks'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TaskRoutingModule {}\r\n","export default \".mousestyle {\\n  cursor: pointer;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3MvdGFzay9DOlxcVXNlcnNcXEFETUlOU1xcRGVza3RvcFxcUHJvamVjdDFcXG9jdFxcTGVhcm5pbmctQXBwLVdlYlNob3BwaW5nXFxhZG1pbi11aS9zcmNcXGFwcFxcdmlld3NcXHRhc2tcXHRhc2suY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3ZpZXdzL3Rhc2svdGFzay5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7QUNDRiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3Rhc2svdGFzay5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tb3VzZXN0eWxle1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG4iLCIubW91c2VzdHlsZSB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn0iXX0= */\";","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { AlertService } from '../../shared/_alert';\r\nimport { TaskService } from '../../shared/task/task.service';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { startWith, map } from 'rxjs/operators';\r\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\r\nimport { UserStoreService } from '../../service/userStore/user-store.service';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n@Component({\r\n  selector: 'app-task',\r\n  templateUrl: 'task.component.html',\r\n  styleUrls: ['task.component.scss']\r\n})\r\nexport class TaskComponent implements OnInit {\r\n\r\n  loading = false;\r\n  createLoading = false;\r\n  createCard = false;\r\n  sub: Subscription;\r\n  userPermissions:any[];\r\n  isCreateTaskAllowed = false;\r\n  makeCallOninit = false;\r\n\r\n  // MatPaginator Inputs\r\n  offset = 0;\r\n  total = 10;\r\n  pageSize = 5;\r\n  pageSizeOptions: number[] = [5, 10, 50];\r\n\r\n  //autoComplete\r\n  myControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n  options: any[];\r\n  filteredOptions: Observable<any[]>;\r\n\r\n  assigneeId: number;\r\n  endDate: Date = new Date();\r\n  content: string;\r\n\r\n  assignedTasks: any[] = new Array();\r\n  createdTasks: any[] = new Array();\r\n\r\n  selectedStatus = '';\r\n  changeSlected(event){\r\n    this.selectedStatus = event.target.value;\r\n  }\r\n\r\n  dateFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  constructor(private route: ActivatedRoute,\r\n              private alertService: AlertService,\r\n              private taskService: TaskService,\r\n              private userStore: UserStoreService,\r\n              private cookieService: CookieService) {\r\n      let allowCall =this.cookieService.get('JWT');\r\n      if(allowCall != null && allowCall != undefined && allowCall != ''){\r\n        this.makeCallOninit = true;\r\n        this.loading = true;\r\n        //show create card for only admin and manager permission\r\n        let onLoad = setInterval(() => {\r\n          this.userPermissions = this.userStore.employeePermissions;\r\n          if(this.userPermissions != undefined && this.userPermissions.length > 0){\r\n            let permissionIds = new Array(4);\r\n            this.userPermissions.forEach(permission => {\r\n              permissionIds.push(permission.permission.permissionId);\r\n            });\r\n            if(permissionIds.includes(1) || permissionIds.includes(2)){\r\n              this.isCreateTaskAllowed = true;\r\n            }\r\n\r\n            clearInterval(onLoad);\r\n          }\r\n        }, 500);\r\n        //get all assigned tasks\r\n        this.taskService.getAssignedTask()\r\n                        .subscribe((resp:any) => {\r\n                          if(resp.statusCode  === 200){\r\n                            this.assignedTasks = resp.dataList;\r\n                          }\r\n                          this.loading = false;\r\n                        },\r\n                        (error) => {\r\n                          this.loading = false;\r\n                        });\r\n        this.taskService.getAllEmployeeNamesAndEmail()\r\n                        .subscribe((resp:any) => {\r\n                          if(resp.statusCode  === 200){\r\n                            this.options = resp.dataList;\r\n                            this.filteredOptions = this.myControl.valueChanges.pipe(\r\n                              startWith(''),\r\n                              map(value => this._filter(value))\r\n                            );\r\n                          }\r\n                          else{\r\n                            this.alertService.error('Failed : ' + resp.errorMessages);\r\n                          }\r\n                          this.loading = false;\r\n                        },\r\n                        (error:any) => {\r\n                          this.alertService.error(\"something went wrong!\");\r\n                          this.loading = false;\r\n                        });\r\n      }\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if(this.makeCallOninit){\r\n      this.createLoading = true;\r\n      this.sub = this.route.params.subscribe(params => {\r\n        this.createCard = params['isTaskpage'];\r\n      });\r\n      this.taskService.getCreatedTask()\r\n                    .subscribe((resp:any) => {\r\n                      if(resp.statusCode  === 200){\r\n                        this.createdTasks = resp.dataList;\r\n                      }\r\n                      else{\r\n                        this.alertService.error('Failed : ' + resp.errorMessages);\r\n                      }\r\n                      this.createLoading = false;\r\n                    },\r\n                    (error:any) => {\r\n                      this.alertService.error(\"something went wrong!\");\r\n                      this.createLoading = false;\r\n                    });\r\n    }\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n    return this.options.filter(option => option.firstName.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n\r\n  showTaskActions(): boolean{\r\n    if(this.createCard){\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n  showCreateCard(): boolean{\r\n    if(this.createCard && this.isCreateTaskAllowed){\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n  setUser(user:any)\r\n  {\r\n    this.assigneeId = user.employeeId;\r\n  }\r\n\r\n  setEndDate(type: string, event: MatDatepickerInputEvent<Date>){\r\n    this.endDate = event.value;\r\n  }\r\n\r\n  createTask(){\r\n    this.createLoading = true;\r\n    this.taskService.createTask(this.content, this.assigneeId, this.endDate)\r\n                    .subscribe((resp:any) => {\r\n                      if(resp.statusCode  === 200){\r\n                        this.createdTasks = resp.dataList;\r\n                      }\r\n                      else{\r\n                        this.alertService.error('Failed : ' + resp.errorMessages);\r\n                      }\r\n                      this.createLoading = false;\r\n                    },\r\n                    (error:any) => {\r\n                      this.alertService.error(\"something went wrong!\");\r\n                      this.createLoading = false;\r\n                    });\r\n  }\r\n\r\n  removeTask(task:any){\r\n    this.createLoading = true;\r\n    this.taskService.removeTask(task.taskId)\r\n                    .subscribe((resp:any) => {\r\n                      if(resp.statusCode  === 200){\r\n                        this.createdTasks = resp.dataList;\r\n                      }\r\n                      else{\r\n                      }\r\n                      this.createLoading = false;\r\n                    },\r\n                    (error:any) => {\r\n                      this.alertService.error(\"something went wrong!\");\r\n                      this.createLoading = false;\r\n                    });\r\n  }\r\n\r\n  completeTask(task:any){\r\n    this.loading = true;\r\n    this.taskService.updateTask(task.taskId, 'Completed')\r\n                    .subscribe((resp:any) => {\r\n                      if(resp.statusCode  === 200){\r\n                        this.assignedTasks = resp.dataList;\r\n                      }\r\n                      else{\r\n                        this.alertService.error('Failed : ' + resp.errorMessages);\r\n                      }\r\n                      this.loading = false;\r\n                    },\r\n                    (error:any) => {\r\n                      this.alertService.error(\"something went wrong!\");\r\n                      this.loading = false;\r\n                    });\r\n  }\r\n\r\n  action(event){\r\n\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgxLoadingModule, ngxLoadingAnimationTypes } from 'ngx-loading';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { AlertModule } from '../../shared/_alert/alert.module';\r\nimport { TaskRoutingModule } from './task-routing.module';\r\nimport { TaskComponent } from './task.component';\r\n// Material modules\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TaskComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TaskRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgxLoadingModule.forRoot({\r\n      animationType: ngxLoadingAnimationTypes.rectangleBounce,\r\n      backdropBackgroundColour: 'rgba(0,0,0,0.3)',\r\n      backdropBorderRadius: '4px',\r\n      primaryColour: 'cornflowerblue',\r\n      secondaryColour: 'chocolate',\r\n      tertiaryColour: 'darkred'\r\n    }),\r\n    SharedModule,\r\n    AlertModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n  ],\r\n  exports: [\r\n    TaskComponent\r\n  ]\r\n})\r\nexport class TaskModule { }\r\n"],"sourceRoot":"webpack:///"}