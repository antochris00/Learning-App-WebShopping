{"version":3,"sources":["./src/app/views/employee/create-employee/create-employee.component.html","./src/app/views/employee/employee-permission/employee-permission.component.html","./src/app/views/employee/employee.component.html","./src/app/shared/employee/employee.service.ts","./src/app/views/employee/create-employee/create-employee.component.css","./src/app/views/employee/create-employee/create-employee.component.ts","./src/app/views/employee/employee-permission/employee-permission.component.css","./src/app/views/employee/employee-permission/employee-permission.component.ts","./src/app/views/employee/employee-routing.module.ts","./src/app/views/employee/employee.component.ts","./src/app/views/employee/employee.module.ts"],"names":[],"mappings":"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","file":"default~views-dashboard-dashboard-module~views-employee-employee-module.js","sourcesContent":["export default \"<alert class=\\\"p-4 text-center\\\"></alert>\\r\\n<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <div class=\\\"card\\\">\\r\\n        <ngx-loading [show]=\\\"loading\\\"></ngx-loading>\\r\\n        <div class=\\\"card-header\\\">\\r\\n          <i class=\\\"fa fa-user-plus\\\"></i>Onboard New Employee\\r\\n          <div class=\\\"float-right\\\">\\r\\n            <button mat-button class=\\\"btn btn-ghost-success\\\" style=\\\"border: 1px solid;\\\" (click)=\\\"onboard()\\\">\\r\\n              <i class=\\\"fa fa-user-o\\\"></i> Create Employee\\r\\n            </button>\\r\\n          </div>\\r\\n          <div class=\\\"float-right\\\">\\r\\n            <mat-slide-toggle matTooltip=\\\"Activate Account\\\"\\r\\n              color=\\\"warn\\\"\\r\\n              [checked]=\\\"activeUser\\\"\\r\\n              (change)=\\\"slidetoggle()\\\">\\r\\n            </mat-slide-toggle>\\r\\n            <i class=\\\"fa fa-shield\\\" style=\\\"visibility: hidden;\\\"></i>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <table class=\\\"table table-responsive-sm\\\">\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>First Name</mat-label>\\r\\n                    <input required matInput placeholder=\\\"First Name\\\" [formControl]=\\\"fnameFormControl\\\" name=\\\"fname\\\" [(ngModel)] = 'firstName'>\\r\\n                    <mat-error *ngIf=\\\"fnameFormControl.hasError('required')\\\">\\r\\n                      First Name is <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>Last Name</mat-label>\\r\\n                    <input required matInput placeholder=\\\"Last Name\\\" [formControl]=\\\"lnameFormControl\\\" name=\\\"lname\\\" [(ngModel)] = 'lastName'>\\r\\n                    <mat-error *ngIf=\\\"lnameFormControl.hasError('required')\\\">\\r\\n                      Last Name is <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>Email-ID</mat-label>\\r\\n                    <input required matInput placeholder=\\\"EmailID\\\" [formControl]=\\\"emailFormControl\\\" name=\\\"email\\\" [(ngModel)] = 'email'>\\r\\n                    <mat-error *ngIf=\\\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\\\">\\r\\n                      Please enter a valid email address\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"emailFormControl.hasError('required')\\\">\\r\\n                      Email is <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>Mobile</mat-label>\\r\\n                    <input required type=\\\"number\\\" matInput placeholder=\\\"Mobile\\\" [formControl]=\\\"mobileFormControl\\\" name=\\\"mobile\\\" [(ngModel)] = 'mobile'>\\r\\n                    <mat-error *ngIf=\\\"mobileFormControl.hasError('required')\\\">\\r\\n                      Mobile Number is <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"mobileFormControl.hasError('max') || mobileFormControl.hasError('min')\\\">\\r\\n                      <strong>Invalid</strong> Mobile Number\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>Designation</mat-label>\\r\\n                    <input required matInput placeholder=\\\"Designation\\\" [formControl]=\\\"designationFormControl\\\" name=\\\"desig\\\" [(ngModel)] = 'designation'>\\r\\n                    <mat-error *ngIf=\\\"designationFormControl.hasError('required')\\\">\\r\\n                      Designation<strong> cannot be Empty </strong>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n                <td>\\r\\n                  <mat-radio-group\\r\\n                    aria-labelledby=\\\"example-radio-group-label\\\"\\r\\n                    class=\\\"example-radio-group\\\"\\r\\n                    [(ngModel)]=\\\"selectedGender\\\">\\r\\n                    <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let gender of genders\\\" [value]=\\\"gender\\\">\\r\\n                      <i class=\\\"fa fa-{{gender}} fa-lg mt-1\\\"></i> {{gender}}\\r\\n                    </mat-radio-button>\\r\\n                  </mat-radio-group>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>Date of Birth</mat-label>\\r\\n                    <input required matInput [matDatepicker]=\\\"dobpicker\\\" [formControl]=\\\"dobFormControl\\\" (dateChange)=\\\"setDob('change', $event)\\\" disabled>\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"dobpicker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #dobpicker disabled=\\\"false\\\"></mat-datepicker>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <mat-label> Additional Information</mat-label>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>Door Number</mat-label>\\r\\n                    <input required matInput placeholder=\\\"Door Number\\\" [formControl]=\\\"doorFormControl\\\" name=\\\"door\\\" [(ngModel)] = 'door'>\\r\\n                    <mat-error *ngIf=\\\"doorFormControl.hasError('required')\\\">\\r\\n                      Door Number is <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>Street</mat-label>\\r\\n                    <input required matInput placeholder=\\\"Street\\\" [formControl]=\\\"streetFormControl\\\" name=\\\"street\\\" [(ngModel)] = 'street' >\\r\\n                    <mat-error *ngIf=\\\"streetFormControl.hasError('required')\\\">\\r\\n                      Street Name is <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>City</mat-label>\\r\\n                    <input required matInput placeholder=\\\"city\\\" [formControl]=\\\"cityFormControl\\\" name=\\\"city\\\" [(ngModel)] = 'city'>\\r\\n                    <mat-error *ngIf=\\\"cityFormControl.hasError('required')\\\">\\r\\n                      City Name is <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>State</mat-label>\\r\\n                    <input required matInput placeholder=\\\"State\\\" [formControl]=\\\"stateFormControl\\\" name=\\\"state\\\" [(ngModel)] = 'state'>\\r\\n                    <mat-error *ngIf=\\\"stateFormControl.hasError('required')\\\">\\r\\n                      State Name is <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <mat-form-field appearance=\\\"outline\\\" class=\\\"matitem\\\">\\r\\n                    <mat-label>PIN Code</mat-label>\\r\\n                    <input required matInput placeholder=\\\"PIN\\\" [formControl]=\\\"pinFormControl\\\" name=\\\"pin\\\" [(ngModel)] = 'pincode'>\\r\\n                    <mat-error *ngIf=\\\"pinFormControl.hasError('required')\\\">\\r\\n                      PIN code is <strong>required</strong>\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </td>\\r\\n              </tr>\\r\\n            </table>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"<alert class=\\\"p-4 text-center\\\"></alert>\\r\\n<div class=\\\"animated fadeIn\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <div class=\\\"card\\\">\\r\\n        <ngx-loading [show]=\\\"loading\\\"></ngx-loading>\\r\\n        <div class=\\\"card-header\\\">\\r\\n          <i class=\\\"fa fa-universal-access\\\"></i>Modify Employee Access Permissions\\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <table class=\\\"table table-responsive-sm\\\">\\r\\n              <tr>\\r\\n                <td>\\r\\n                  <div class=\\\"col-md-12\\\">\\r\\n                    <mat-form-field style=\\\"width: inherit;\\\" class=\\\"matitem\\\">\\r\\n                      <input type=\\\"text\\\"\\r\\n                             placeholder=\\\"Search Based on Id / Email / Name\\\"\\r\\n                             matInput\\r\\n                             [formControl]=\\\"myControl\\\"\\r\\n                             [matAutocomplete]=\\\"auto\\\"\\r\\n                             [(ngModel)]=\\\"email\\\">\\r\\n                      <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\" >\\r\\n                        <mat-option (onSelectionChange)=\\\"setUser(option)\\\" *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option.firstName+' '+option.lastName\\\">\\r\\n                          {{option.firstName}} {{option.lastName}} - {{option.emailId}}\\r\\n                        </mat-option>\\r\\n                      </mat-autocomplete>\\r\\n                      <button matSuffix type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"searchAction()\\\"><i class=\\\"fa fa-search\\\"></i> Search Employee </button>\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n                </td>\\r\\n                <td></td>\\r\\n              </tr>\\r\\n              <tr *ngIf=\\\"!showcard()\\\">\\r\\n                <td></td>\\r\\n                <td></td>\\r\\n              </tr>\\r\\n            </table>\\r\\n            <table class=\\\"table table-responsive-sm\\\">\\r\\n              <tr *ngIf=\\\"showcard()\\\">\\r\\n                <td>\\r\\n                  <div class=\\\"card\\\">\\r\\n                    <div class=\\\"card-header\\\">\\r\\n                      {{employeeName}}\\r\\n                    </div>\\r\\n                    <div class=\\\"card-header float-right\\\">\\r\\n                      EMP-ID : {{employeeInfo.employeeId}}\\r\\n                    </div>\\r\\n                    <div class=\\\"card-body\\\">\\r\\n                      <button mat-button [disabled]=\\\"true\\\" style=\\\"text-align: inherit; color: gray;\\\">\\r\\n                        <i class=\\\"fa fa-shield\\\"></i>\\r\\n                        <span class=\\\"icon-text\\\"> Activate Employee</span><br/>\\r\\n                      </button>\\r\\n                      <mat-slide-toggle\\r\\n                        color=\\\"warn\\\"\\r\\n                        [checked]=\\\"getEmployeeActive()\\\"\\r\\n                        (change)=\\\"slidetoggle()\\\">\\r\\n                      </mat-slide-toggle>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </td>\\r\\n                <td>\\r\\n                  <!-- <div class=\\\"col-lg-6 col-lg-4\\\"> -->\\r\\n                    <div class=\\\"card\\\">\\r\\n                      <div class=\\\"card-header\\\">\\r\\n                        Employee Permissions\\r\\n                        <div class=\\\"card-header-actions\\\">\\r\\n                          <span class=\\\"badge badge-warning\\\">{{activePermissions}}</span>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"card-body\\\">\\r\\n                        <p>\\r\\n                          <mat-checkbox [(ngModel)]=\\\"adminEnabled\\\">\\r\\n                            {{allPermissions[0].permissionName}}\\r\\n                          </mat-checkbox>\\r\\n                        </p>\\r\\n                        <p>\\r\\n                          <mat-checkbox [(ngModel)]=\\\"managerEnabled\\\">\\r\\n                            {{allPermissions[1].permissionName}}\\r\\n                          </mat-checkbox>\\r\\n                        </p>\\r\\n                        <p>\\r\\n                          <mat-checkbox [(ngModel)]=\\\"marketingEnabled\\\">\\r\\n                            {{allPermissions[2].permissionName}}\\r\\n                          </mat-checkbox>\\r\\n                        </p>\\r\\n                        <p>\\r\\n                          <mat-checkbox [(ngModel)]=\\\"supportEnabled\\\">\\r\\n                            {{allPermissions[3].permissionName}}\\r\\n                          </mat-checkbox>\\r\\n                        </p>\\r\\n                        <div class=\\\"float-right\\\">\\r\\n                          <button mat-button class=\\\"btn btn-ghost-warning\\\" style=\\\"border: 1px solid;\\\" (click)=\\\"overridePermissions()\\\">\\r\\n                            <i class=\\\"fa fa-key\\\"></i> Update Permissions\\r\\n                          </button>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  <!-- </div> -->\\r\\n                </td>\\r\\n              </tr>\\r\\n            </table>\\r\\n            <div >\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"<alert class=\\\"p-4 text-center\\\"></alert>\\r\\n<table class=\\\"table table-responsive-sm table-hover table-outline mb-0\\\">\\r\\n  <ngx-loading [show]=\\\"loading\\\"></ngx-loading>\\r\\n  <thead class=\\\"thead-light\\\">\\r\\n    <tr>\\r\\n      <th class=\\\"text-center\\\"><i class=\\\"icon-people\\\"></i></th>\\r\\n      <th>ID</th>\\r\\n      <th>Employee Name</th>\\r\\n      <th>Contact</th>\\r\\n      <th>Email-ID</th>\\r\\n      <th>Designation</th>\\r\\n      <th>Status</th>\\r\\n      <th>Activity\\r\\n        <i class=\\\"fa fa-refresh float-right\\\" style=\\\"color: orange; cursor: pointer;\\\" (click)=\\\"refreshEmployeeList()\\\"></i>\\r\\n      </th>\\r\\n    </tr>\\r\\n  </thead>\\r\\n  <tbody style=\\\"background: white;\\\">\\r\\n    <tr *ngFor=\\\"let employee of employeesList\\\">\\r\\n      <td class=\\\"text-center\\\">\\r\\n        <div class=\\\"avatar\\\">\\r\\n          <img src={{getProfilePic(employee.profilePic)}} class=\\\"img-avatar\\\" alt=\\\"DP\\\">\\r\\n          <span *ngIf=\\\"isloggedIn(employee.loggedIn)\\\" class=\\\"avatar-status badge-success\\\"></span>\\r\\n          <span *ngIf=\\\"!isloggedIn(employee.loggedIn)\\\" class=\\\"avatar-status badge-dark\\\"></span>\\r\\n        </div>\\r\\n      </td>\\r\\n      <td>\\r\\n        <div>{{employee.employeeId}}</div>\\r\\n      </td>\\r\\n      <td>\\r\\n        <div>{{employee.firstName + \\\" \\\" + employee.lastName}}</div>\\r\\n        <div class=\\\"small text-muted\\\">\\r\\n          <span>DOB : {{employee.dob | date : 'dd-MM-yyy'}}</span>\\r\\n        </div>\\r\\n      </td>\\r\\n      <td>\\r\\n        <div>\\r\\n          {{employee.mobile}}\\r\\n        </div>\\r\\n      </td>\\r\\n      <td>\\r\\n        <div>\\r\\n          {{employee.emailId}}\\r\\n        </div>\\r\\n      </td>\\r\\n      <td>\\r\\n        <div>\\r\\n          {{employee.designation}}\\r\\n        </div>\\r\\n      </td>\\r\\n      <td>\\r\\n        <div>\\r\\n          <span *ngIf='employee.active' class=\\\"badge badge-success\\\">Active</span>\\r\\n          <span *ngIf='!employee.active' class=\\\"badge badge-danger\\\">Locked</span>\\r\\n        </div>\\r\\n      </td>\\r\\n      <td>\\r\\n        <div class=\\\"small text-muted\\\">Last Active</div>\\r\\n        <strong>{{employee.lastLogin | date: 'dd/MM/yyyy hh:mm a'}}</strong>\\r\\n      </td>\\r\\n    </tr>\\r\\n  </tbody>\\r\\n</table>\\r\\n<mat-paginator [length]=\\\"total\\\"\\r\\n[pageSize]=\\\"pageSize\\\"\\r\\n[pageSizeOptions]=\\\"pageSizeOptions\\\"\\r\\n(page)=\\\"action($event)\\\">\\r\\n</mat-paginator>\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService {\r\n\r\n  createEmployeeEndpoint = \"/secure/admin/employee/createEmployee\";\r\n  allPermissionsEndpoint = \"/secure/admin/employee/getAllPermissions\";\r\n  employeeEndpoint = \"/secure/admin/employee/getEmployee\";\r\n  allEmployeeEndpoint = \"/secure/admin/employee/getAllEmployee\";\r\n  allEmployeeCountEndpoint = \"/secure/admin/employee/getAllEmployeesCount\";\r\n  updatePermissionEndpoint = \"/secure/admin/employee/overridePermissions\";\r\n  statusUpdateEndpoint = \"/secure/admin/employee/activateEmployee\";\r\n  getEmployeesByIdEndPoint = \"/secure/admin/employee/getEmployeesById\";\r\n  getAllEmployeeNamesAndEmailEndpoint = \"/secure/admin/employee/getAllEmployeeNames\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  createEmployee(firstName, lastName,\r\n                email, mobile, designation, active, dob, selectedGender,\r\n                door, street, state, city, pincode) : Observable<any>{\r\n    const body = {\r\n      emailId : email,\r\n      firstName : firstName,\r\n      lastName : lastName,\r\n      designation : designation,\r\n      dob : dob,\r\n      gender : selectedGender,\r\n      mobile : mobile,\r\n      active: active,\r\n      employeeAddress: [\r\n          {\r\n            doorNumber:door,\r\n            street:street,\r\n            city:city,\r\n            state:state,\r\n            pincode:pincode\r\n          }\r\n      ]\r\n     };\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n      }),\r\n    };\r\n    return this.http.post(environment.backendBaseUrl+this.createEmployeeEndpoint, body, httpOptions);\r\n  }\r\n\r\n  getAllPermissions(): Observable<any>{\r\n    return this.http.get(environment.backendBaseUrl+this.allPermissionsEndpoint);\r\n  }\r\n\r\n  getEmployeeInfo(emailOrId: string): Observable<any>{\r\n    const httpOptions = {\r\n      params: {emailOrId: emailOrId}\r\n    };\r\n    return this.http.get(environment.backendBaseUrl+this.employeeEndpoint, httpOptions);\r\n  }\r\n\r\n  updatePermissions(employeeId:number, permissionIds: number[]): Observable<any>{\r\n    const httpOptions = {\r\n        employeeId: employeeId,\r\n        permissions: permissionIds\r\n    };\r\n    return this.http.put(environment.backendBaseUrl+this.updatePermissionEndpoint, httpOptions);\r\n  }\r\n\r\n  changeEmployeeStatus(employeeId:number, status: boolean): Observable<any>{\r\n    const httpOptions = {\r\n      employeeId: employeeId,\r\n      active: status\r\n    };\r\n    return this.http.put(environment.backendBaseUrl+this.statusUpdateEndpoint, httpOptions);\r\n  }\r\n\r\n  getAllEmployees(offset, limit): Observable<any>{\r\n\r\n    //Set Headers\r\n    let requestHeaders = new HttpHeaders().set('Content-Type', 'application/json')\r\n    .append('Offset', offset)\r\n    .append('Limit', limit);\r\n\r\n    const httpOptions = {\r\n      headers: requestHeaders\r\n    };\r\n\r\n    return this.http.get(environment.backendBaseUrl+this.allEmployeeEndpoint, httpOptions);\r\n  }\r\n\r\n  getEmployeesById(ids){\r\n    const httpOptions = {\r\n      params: {ids: ids}\r\n    };\r\n    return this.http.get(environment.backendBaseUrl+this.getEmployeesByIdEndPoint, httpOptions);\r\n  }\r\n\r\n  getAllEmployeesCount(): Observable<any>{\r\n    return this.http.get(environment.backendBaseUrl+this.allEmployeeCountEndpoint);\r\n  }\r\n\r\n  getAllEmployeeNamesAndEmail(): Observable<any> {\r\n    return this.http.get(environment.backendBaseUrl+this.getAllEmployeeNamesAndEmailEndpoint);\r\n  }\r\n\r\n}\r\n","export default \".table th, .table td {\\r\\n  border-top: 0px !important;\\r\\n}\\r\\n\\r\\n.matitem{\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.example-radio-group {\\r\\n  display: flex;\\r\\n  flex-direction: row;\\r\\n  margin: 15px 0;\\r\\n}\\r\\n\\r\\n.example-radio-button {\\r\\n  margin: 5px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3MvZW1wbG95ZWUvY3JlYXRlLWVtcGxveWVlL2NyZWF0ZS1lbXBsb3llZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsMEJBQTBCO0FBQzVCOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsV0FBVztBQUNiIiwiZmlsZSI6InNyYy9hcHAvdmlld3MvZW1wbG95ZWUvY3JlYXRlLWVtcGxveWVlL2NyZWF0ZS1lbXBsb3llZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRhYmxlIHRoLCAudGFibGUgdGQge1xyXG4gIGJvcmRlci10b3A6IDBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ubWF0aXRlbXtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLmV4YW1wbGUtcmFkaW8tZ3JvdXAge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICBtYXJnaW46IDE1cHggMDtcclxufVxyXG5cclxuLmV4YW1wbGUtcmFkaW8tYnV0dG9uIHtcclxuICBtYXJnaW46IDVweDtcclxufVxyXG4iXX0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators} from '@angular/forms';\r\nimport { EmployeeService } from '../../../shared/employee/employee.service';\r\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\r\nimport { Alert, AlertService } from '../../../shared/_alert';\r\n\r\n@Component({\r\n  selector: 'app-create-employee',\r\n  templateUrl: './create-employee.component.html',\r\n  styleUrls: ['./create-employee.component.css']\r\n})\r\nexport class CreateEmployeeComponent implements OnInit {\r\n\r\n  loading = false;\r\n  alertoptions = {\r\n    autoClose: false,\r\n    keepAfterRouteChange: false\r\n  };\r\n\r\n  activeUser:boolean;\r\n  selectedGender = 'male';\r\n  firstName:string;\r\n  lastName:string;\r\n  email:string;\r\n  mobile:string;\r\n  designation:string;\r\n  door: string;\r\n  street: string;\r\n  city: string;\r\n  state: string;\r\n  pincode: string;\r\n  dob: Date;\r\n  genders = ['male', 'female'];\r\n\r\n  emailFormControl = new FormControl('', [\r\n    Validators.required,\r\n    Validators.email,\r\n  ]);\r\n\r\n  fnameFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  lnameFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  mobileFormControl = new FormControl('', [\r\n    Validators.required,\r\n    Validators.min(999999999),\r\n    Validators.max(9999999999)\r\n  ]);\r\n\r\n  designationFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  doorFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  streetFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  cityFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  stateFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  pinFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  dobFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  constructor(private empService: EmployeeService,\r\n              private alertService: AlertService) {\r\n    this.activeUser = true;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  slidetoggle(){\r\n    this.activeUser = !this.activeUser;\r\n  }\r\n\r\n  setDob(type: string, event: MatDatepickerInputEvent<Date>){\r\n    this.dob = event.value;\r\n  }\r\n\r\n  onboard(){\r\n    let hasError = false;\r\n    if(this.emailFormControl.hasError('email') || this.emailFormControl.hasError('required')){\r\n      this.alertService.warn('Email Field has Errors', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.fnameFormControl.hasError('required')){\r\n      this.alertService.warn('First Name is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.lnameFormControl.hasError('required')){\r\n      this.alertService.warn('Last Name is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.mobileFormControl.hasError('required')){\r\n      this.alertService.warn('Mobile Number is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.designationFormControl.hasError('required')){\r\n      this.alertService.warn('Designation is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.doorFormControl.hasError('required')){\r\n      this.alertService.warn('Door Number is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.streetFormControl.hasError('required')){\r\n      this.alertService.warn('Street Name is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.cityFormControl.hasError('required')){\r\n      this.alertService.warn('City Name is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.stateFormControl.hasError('required')){\r\n      this.alertService.warn('State Name is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.pinFormControl.hasError('required')){\r\n      this.alertService.warn('PIN Code is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(this.dobFormControl.hasError('required')){\r\n      this.alertService.warn('DateOfBirth is Required', this.alertoptions);\r\n      hasError = true;\r\n    }\r\n    if(!hasError){\r\n      this.alertService.clear();\r\n      this.loading = true;\r\n      this.empService.createEmployee(this.firstName, this.lastName,\r\n        this.email, this.mobile, this.designation, this.activeUser, this.dob, this.selectedGender,\r\n        this.door, this.street, this.state, this.city, this.pincode)\r\n          .subscribe(\r\n            (resp:any) => {\r\n              if(resp.statusCode === 200){\r\n                this.alertService.success('Employee Onboarded Successfully !', this.alertoptions);\r\n                this.alertService.info('An onboarding email has been sent. Please assign permissions', this.alertoptions);\r\n              }\r\n              else{\r\n                this.alertService.error(\"Employee Creation Failed - \" + resp.errorMessages);\r\n              }\r\n              this.loading = false;\r\n            },\r\n            (error:any) => {\r\n              this.alertService.error(\"Something went wrong.... Try again Later\");\r\n              this.loading = false;\r\n            }\r\n          );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2VtcGxveWVlL2VtcGxveWVlLXBlcm1pc3Npb24vZW1wbG95ZWUtcGVybWlzc2lvbi5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { EmployeeService } from '../../../shared/employee/employee.service';\r\nimport { AlertService } from '../../../shared/_alert';\r\nimport { Observable } from 'rxjs';\r\nimport { startWith, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-employee-permission',\r\n  templateUrl: './employee-permission.component.html',\r\n  styleUrls: ['./employee-permission.component.css']\r\n})\r\nexport class EmployeePermissionComponent implements OnInit {\r\n\r\n  loading = false;\r\n  email:string;\r\n  employeeInfo: any;\r\n  employeeName: string;\r\n  activePermissions: number;\r\n  allPermissions: any[];\r\n  adminEnabled: boolean;\r\n  managerEnabled: boolean;\r\n  marketingEnabled: boolean;\r\n  supportEnabled: boolean;\r\n\r\n  emailFormControl = new FormControl('', [\r\n    Validators.required\r\n  ]);\r\n\r\n  alertoptions = {\r\n    autoClose: false,\r\n    keepAfterRouteChange: false\r\n  };\r\n\r\n  // public selectedValue = '';\r\n  // public staticEmailList = [];\r\n\r\n  // public handleStaticResultSelected (result) {\r\n  //   this.selectedValue = result;\r\n  //   // this.searchAction();\r\n  // }\r\n\r\n  searchUserId: number;\r\n    //autoComplete\r\n    myControl = new FormControl('', [\r\n      Validators.required\r\n    ]);\r\n    options: any[];\r\n    filteredOptions: Observable<any[]>;\r\n\r\n  constructor(private emplService: EmployeeService, private alertService: AlertService) {\r\n        this.emplService.getAllEmployeeNamesAndEmail()\r\n                        .subscribe((resp:any) => {\r\n                          if(resp.statusCode  === 200){\r\n                            this.options = resp.dataList;\r\n                            this.filteredOptions = this.myControl.valueChanges.pipe(\r\n                              startWith(''),\r\n                              map(value => this._filter(value))\r\n                            );\r\n                          }\r\n                          else{\r\n                            this.alertService.error('Failed : ' + resp.errorMessages);\r\n                          }\r\n                          this.loading = false;\r\n                        },\r\n                        (error:any) => {\r\n                          this.alertService.error(\"something went wrong!\");\r\n                          this.loading = false;\r\n                        });\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    if(value === \"\")\r\n    {\r\n      return;\r\n    }\r\n    const filterValue = value.toLowerCase();\r\n    return this.options.filter(option => (option.firstName.toLowerCase().indexOf(filterValue) === 0 || option.emailId.toLowerCase().indexOf(filterValue) === 0));\r\n  }\r\n\r\n  setUser(user:any)\r\n  {\r\n    this.email = user.emailId;\r\n    this.searchAction();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.emplService.getAllPermissions()\r\n        .subscribe((resp: any)=>{\r\n          this.allPermissions = resp.dataList;\r\n          this.loading = false;\r\n        },\r\n        (error)=>{\r\n          console.log('Error in fetching permissions... Try again later!');\r\n          this.loading = false;\r\n        })\r\n  }\r\n\r\n  showcard(){\r\n    return this.employeeName!=null || this.employeeName!= undefined;\r\n  }\r\n\r\n  slidetoggle(){\r\n    this.loading = true;\r\n    this.employeeInfo.active = !this.employeeInfo.active;\r\n    this.emplService.changeEmployeeStatus(this.employeeInfo.employeeId, this.employeeInfo.active)\r\n                    .subscribe((resp:any) => {\r\n                      if(resp.statusCode === 200){\r\n                        (this.employeeInfo.active === true) ?\r\n                        this.alertService.success('Employee Account is Active' , this.alertoptions)\r\n                        : this.alertService.warn('Employee Account is Blocked' , this.alertoptions);\r\n                      }\r\n                      else if(resp.statusCode === 503){\r\n                        this.alertService.error('Operation Failed : ' + resp.errorMessages);\r\n                      }\r\n                      this.loading = false;\r\n                    },\r\n                    (error:any) => {\r\n                      this.alertService.error('Something went wrong... Try again later!');\r\n                      this.loading = false;\r\n                    });\r\n  }\r\n\r\n  getEmployeeActive(){\r\n    return this.employeeInfo!=null || this.employeeInfo!=undefined ? this.employeeInfo.active : false;\r\n  }\r\n\r\n  // All permissions are reffered statically hence any change in DB ket must be updated here.\r\n  setPermissions(){\r\n    this.employeeInfo.employeePermissions.forEach( permission => {\r\n      if(permission.permission.permissionId == 1){\r\n        this.adminEnabled = true;\r\n      }\r\n      if(permission.permission.permissionId == 2){\r\n        this.managerEnabled = true;\r\n      }\r\n      if(permission.permission.permissionId == 3){\r\n        this.marketingEnabled = true;\r\n      }\r\n      if(permission.permission.permissionId == 4){\r\n        this.supportEnabled = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  searchAction(){\r\n    this.loading = true;\r\n    this.reset();\r\n    if(this.email != undefined || this.email != null){\r\n      this.emplService.getEmployeeInfo(this.email)\r\n                      .subscribe((resp: any) => {\r\n                        if(resp.statusCode === 200){\r\n                          this.employeeInfo = resp.data;\r\n                          this.employeeName = this.employeeInfo.firstName + \" \" + this.employeeInfo.lastName;\r\n                          this.activePermissions = this.employeeInfo.employeePermissions.length;\r\n                          this.setPermissions();\r\n                        }\r\n                        else if(resp.statusCode === 503){\r\n                          this.alertService.error('Error : ' + resp.errorMessages);\r\n                        }\r\n                        this.loading = false;\r\n                      },\r\n                      (error) => {\r\n                        this.alertService.error('Something went wrong... Try again later!');\r\n                        this.loading = false;\r\n                      });\r\n    }\r\n    else{\r\n      this.alertService.warn(\"Empty/Incorrect Entry\");\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  reset(){\r\n    this.employeeName = null;\r\n    this.adminEnabled = false;\r\n    this.managerEnabled = false;\r\n    this.marketingEnabled = false;\r\n    this.supportEnabled = false;\r\n  }\r\n\r\n  overridePermissions(){\r\n    this.loading = true;\r\n    let enabledPermissions:number[] = new Array(4);\r\n    if(this.adminEnabled){\r\n      enabledPermissions.push(1);\r\n    }\r\n    if(this.managerEnabled){\r\n      enabledPermissions.push(2);\r\n    }\r\n    if(this.marketingEnabled){\r\n      enabledPermissions.push(3);\r\n    }\r\n    if(this.supportEnabled){\r\n      enabledPermissions.push(4);\r\n    }\r\n    this.emplService.updatePermissions(this.employeeInfo.employeeId, enabledPermissions)\r\n                    .subscribe((resp:any) => {\r\n                      this.employeeInfo = resp.data;\r\n                      this.employeeName = this.employeeInfo.firstName + \" \" + this.employeeInfo.lastName;\r\n                      this.activePermissions = this.employeeInfo.employeePermissions.length;\r\n                      this.setPermissions();\r\n                      this.alertService.success(\"Permissions updated successfully\", this.alertoptions);\r\n                      this.loading = false;\r\n                    },\r\n                    (error:any) => {\r\n                      this.alertService.error(\"Failed to update permissions... Try again later!\");\r\n                    });\r\n\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CreateEmployeeComponent } from './create-employee/create-employee.component';\r\nimport { EmployeePermissionComponent } from './employee-permission/employee-permission.component';\r\nimport { EmployeeComponent } from './employee.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    data: {\r\n      title: 'Employee'\r\n    },\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'employee'\r\n      },\r\n      {\r\n        path: 'employee',\r\n        component: EmployeeComponent,\r\n        data: {\r\n          title: 'Manage Employee'\r\n        }\r\n      },\r\n      {\r\n        path: 'OnboardEmployee',\r\n        component: CreateEmployeeComponent,\r\n        data: {\r\n          title: 'Onboard Employee'\r\n        }\r\n      },\r\n      {\r\n        path: 'EmployeePermissions',\r\n        component: EmployeePermissionComponent,\r\n        data: {\r\n          title: 'Employee Permissions'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class EmployeeRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { EmployeeService } from '../../shared/employee/employee.service';\r\nimport {PageEvent} from '@angular/material/paginator';\r\nimport { AlertService } from '../../shared/_alert';\r\n\r\n@Component({\r\n  selector: 'app-employee',\r\n  templateUrl: 'employee.component.html'\r\n})\r\nexport class EmployeeComponent implements OnInit {\r\n\r\n  loading = false;\r\n  employeesList: any[];\r\n  defaultProfilePic = \"assets/img/avatars/Blank-Profile.png\";\r\n\r\n  // MatPaginator Inputs\r\n  offset = 0;\r\n  total = 10;\r\n  pageSize = 5;\r\n  pageSizeOptions: number[] = [5, 10, 50];\r\n  // MatPaginator Output\r\n  pageEvent: PageEvent;\r\n\r\n\r\n  constructor(private employeeService: EmployeeService,\r\n              private alertService: AlertService)\r\n  {\r\n\r\n  }\r\n\r\n  setPageSizeOptions(setPageSizeOptionsInput: string) {\r\n    if (setPageSizeOptionsInput) {\r\n      this.pageSizeOptions = setPageSizeOptionsInput.split(',').map(str => +str);\r\n    }\r\n  }\r\n\r\n  action(event){\r\n    this.loading = true;\r\n    this.pageSize = event.pageSize;\r\n    let pageIndex:number = event.pageIndex;\r\n    this.offset = pageIndex * this.pageSize;\r\n    this.employeeService.getAllEmployees(this.offset, this.pageSize)\r\n                        .subscribe((resp:any) => {\r\n                          if(resp.statusCode === 200){\r\n                            this.employeesList = resp.dataList;\r\n                          }\r\n                          else{\r\n                            this.alertService.error('Failed : ' + resp.errorMessages);\r\n                          }\r\n                          this.loading = false;\r\n                        },\r\n                        (error:any) => {\r\n                          this.alertService.error('Something went Wrong....try again later!');\r\n                        });\r\n  }\r\n\r\n  refreshEmployeeList(){\r\n    this.loading = true;\r\n    let empIds = new Array();\r\n    this.employeesList.forEach(emp => {\r\n      empIds.push(emp.employeeId);\r\n    });\r\n    this.employeeService.getEmployeesById(empIds)\r\n                        .subscribe((resp:any) => {\r\n                          if(resp.statusCode === 200){\r\n                            this.employeesList = resp.dataList;\r\n                          }\r\n                          else{\r\n                            this.alertService.error('Failed : ' + resp.errorMessages);\r\n                          }\r\n                          this.loading = false;\r\n                        },\r\n                        (error:any) => {\r\n                          this.alertService.error('Something went Wrong....try again later!');\r\n                        });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.employeeService.getAllEmployeesCount()\r\n                        .subscribe((resp:any) => {\r\n                          this.total = resp.data;\r\n                          this.employeeService.getAllEmployees(this.offset, this.pageSize)\r\n                              .subscribe((resp:any) => {\r\n                                if(resp.statusCode === 200){\r\n                                  this.employeesList = resp.dataList;\r\n                                }\r\n                                else{\r\n                                  this.alertService.error('Failed : ' + resp.errorMessages);\r\n                                }\r\n                                this.loading = false;\r\n                              },\r\n                              (error:any) => {\r\n                                this.alertService.error('Something went Wrong....try again later!');\r\n                              });\r\n                        },\r\n                        (error) => {\r\n                          this.alertService.error('Something went Wrong....try again later!');\r\n                        });\r\n  }\r\n\r\n  getProfilePic(picData:any){\r\n    if(picData === undefined || picData === null){\r\n      return this.defaultProfilePic;\r\n    }\r\n    else{\r\n      return picData;\r\n    }\r\n  }\r\n\r\n  isloggedIn(employeeStatus:any){\r\n    if(employeeStatus === true){\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ChartsModule } from 'ng2-charts';\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\r\nimport { AlertModule } from '../../shared/_alert/alert.module';\r\n// Material modules\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { NgxLoadingModule, ngxLoadingAnimationTypes } from 'ngx-loading';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { EmployeeRoutingModule } from './employee-routing.module';\r\nimport { CreateEmployeeComponent } from './create-employee/create-employee.component';\r\nimport { EmployeePermissionComponent } from './employee-permission/employee-permission.component';\r\nimport { EmployeeComponent } from './employee.component';\r\nimport { NgxTypeaheadModule } from 'ngx-typeahead';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    EmployeeComponent,\r\n    CreateEmployeeComponent,\r\n    EmployeePermissionComponent\r\n  ],\r\n  imports: [\r\n    EmployeeRoutingModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ChartsModule,\r\n    BsDropdownModule,\r\n    ButtonsModule.forRoot(),\r\n    ReactiveFormsModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n    NgxTypeaheadModule,\r\n    NgxLoadingModule.forRoot({\r\n      animationType: ngxLoadingAnimationTypes.rectangleBounce,\r\n      backdropBackgroundColour: 'rgba(0,0,0,0.3)',\r\n      backdropBorderRadius: '4px',\r\n      primaryColour: 'cornflowerblue',\r\n      secondaryColour: 'chocolate',\r\n      tertiaryColour: 'darkred'\r\n    }),\r\n    SharedModule,\r\n    AlertModule\r\n  ],\r\n  exports:[\r\n    EmployeeComponent\r\n  ]\r\n})\r\nexport class EmployeeModule { }\r\n"],"sourceRoot":"webpack:///"}